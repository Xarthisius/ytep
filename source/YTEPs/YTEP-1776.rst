.. _ytep-1776:

YTEP-1776: Team Infrastructure
==============================

Abstract
--------

Created: August 24, 2014
Author: Britton Smith

This document describes the structure, policies, procedures, and processes 
of the yt development team.

Status
------

In Progress

Project Management Links
------------------------

  * `Apache Software Foundation <http://incubator.apache.org/>`_
  * Initial governance discussion on yt-dev: `here <http://lists.spacepope.org/pipermail/yt-dev-spacepope.org/2014-August/013549.html>`_.

Detailed Description
--------------------

Team Structure
^^^^^^^^^^^^^^

The yt development team consists of developers and members.  Anyone 
contributing at least one changeset to the codebase is a developer and shall 
be listed in the Contributors section `here <http://yt-project.org/about.html>`_.  
A member is someone who 
has made continued and significant contribution to the project (changes to the 
codebase, discussion on mailing lists, feedback on pull requests, etc.) for 
some period of time.  After such a period, potential new members are nominated 
for membership by an existing member and confirmed by positive votes from three 
additional members.  Once a developer becomes a member, they remain a member 
for life.  A member maintains the option to give up their membership and have 
their name removed from the list.  Membership may be revoked for anyone who is 
deemed to be directly harmful to the project or the community upon a nomination 
by another member and five supporting member votes.
Upon the initial creation of yt membership status, all developers 
having contributed at least 50 changesets shall be granted membership.  The 
`Project Members <http://yt-project.org/members.html>`_ page gives a description of 
the requirements for membership and provides a list of all members and the year in 
which membership was granted.

Current yt members:

  * Hilary Egan (2014)
  * Nathan Goldbaum (2014)
  * Cameron Hummels (2014)
  * Kacper Kowalik (2014)
  * Sam Leitner (2014)
  * Andrew Myers (2014)
  * Jeff Oishi (2014)
  * Douglas Rudd (2014)
  * Anthony Scopatz (2014)
  * Sam Skillman (2014)
  * Stephen Skory (2014)
  * Britton Smith (2014)
  * Casey Stark (2014)
  * Matthew Turk (2014)
  * John Wise (2014)
  * Michael Zingale (2014)
  * John Zuhone (2014)

Members have write access to all official yt repositories and can, therefore, 
accept pull requests.  
Members are eligible to serve as representatives of the various subcomponents 
of the yt codebase.  Representatives shall meet once a month to discuss the 
status of the codebase as well as current or planned development.  One 
representative shall act as the coordinator, in charge of making sure the team 
meeting happens and responsible for appointing their own replacement.  One other 
representative shall act as secretary and record the minutes of the meeting, 
which shall be posted to the yt-dev list and online.  
One subcomponent may have more than one representative, but at least one must 
be present for the team meeting.  New subcomponents may be added as necessary 
via member nomination and five affirmative member votes.  The nominator must 
also be willing to act as a representative for the new subcomponent until at 
least one other member agrees to be a representative as well.  The current list 
of subcomponents and their representatives is given below.

    ================= ======================= ======================
    Subcomponent      Current Representatives Former Representatives
    ================= ======================= ======================
    infrastructure                           
    testing                                  
    plotting                                 
    analysis modules  Britton Smith(c)
    documentation                            
    ================= ======================= ======================

c - meeting coordinator, s - meeting secretary

Similar to subcomponent representatives, each frontend shall have at least one 
designated liason to act as a knowledge-base for issues relating to implementation 
and testing of that frontend in the yt codebase.  Frontend liasons are entitled to 
attend team meetings but not required.  The current list of frontends and liasons 
is given below.

    ============== =======
    Frontend       Liasons
    ============== =======
    ART            
    ARTIO          
    Athena         
    Boxlib         
    Enzo           Britton Smith
    FLASH          
    GDF            
    Halo Catalogs  Britton Smith
    RAMSES         
    Gadget         
    OWLS           
    SDF            Sam Skillman
    Tipsy          
    ============== =======

Development Practices and Releases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Branches
++++++++

The main yt repository is located at https://bitbucket.org/yt_analysis/yt.

Until the advent of yt-4.0, the yt repository will maintain three active branches: 
*yt*, *stable*, and *yt-2.x*.  As of this document, the *yt-3.0* branch is closed 
for new development, but pull requests will continue to be accepted while 
development transitions back to the *yt* branch.  
The *yt* branch contains all accepted changes and new features that have yet to be 
included in a release.  The tip of the *stable* branch will be the latest release.  
The *yt-2.x* branch will maintain the latest state of the 2.x version of yt.

Standards for Changes to the Code
+++++++++++++++++++++++++++++++++

Development shall occur in forks off of the main repository with changes being 
pulled in via pull requests into the *yt* branch.   Modifications to the code 
typically fall into one of three categories, each of which have different 
requirements for acceptance into the code base.

  * New Features

    * New unit tests (possibly new answer tests)
    * Docstrings for public API
    * Addition of new feature to the narrative documentation
    * Addition of cookbook recipe
    * Issue created on issue tracker, to ensure this is added to the changelog

  * Extension or Breakage of API in Existing Features

    * Update existing narrative docs and docstrings
    * Update existing cookbook recipes
    * Modify or create new unit tests
    * Issue created on issue tracker, to ensure this is added to the changelog

  * Bug fixes

    * Unit test is encouraged, to ensure breakage does not happen again in the
      future.
    * Issue created on issue tracker, to ensure this is added to the changelog

No specific standard shall exist for accepting pull requests of minor bug fixes.  
New features, API breakages, and more substantial bug fixes require approval of 
three yt members or people designated as qualified reviewers by the issuer.

For the development of large features or infrastructure changes involving the work 
of more than one developer, a bookmark on a head of the *yt* branch shall be 
created to enable collaboration.  Pull requests to the development bookmark will be 
accepted according to criteria laid out by the issuer.  Documentation will not be 
considered a requisite for pull requests to be accepted into the bookmark (although 
still encouraged), but a merge of the bookmark into the primary *yt* branch head 
shall not occur until all criteria laid out above have been met.

.. _releases:

Releases
++++++++

Minor releases will follow the schedule given in :ref:`ytep-0008`.  Major or 
unscheduled releases will occur after criteria proposed and accepted in a prior 
team meeting are met.  Before the release, members will be identified as playing an 
integral role in the content of the release, and the release will happen only 
after all of those members give their approval.  Each release will have a 
designated release manager as described in :ref:`ytep-0008`.  The release manager 
should also be present at the team meeting.

Backwards Compatibility
-----------------------

Sic semper inordinatio.

Alternatives
------------

The alternative is to continue with no official guidelines and somehow manage.
